// Copyright 2016 Eliot Courtney.
#include "api/mfe.h"

#include <string>

#include "api/ctx/ctx.h"
#include "api/ctx/ctx_cfg.h"
#include "api/energy/model.h"
#include "common_test.h"
#include "gtest/gtest.h"
#include "model/energy.h"
#include "model/primary.h"

namespace mrna::mfe {

class T22MfeTest : public testing::TestWithParam<CtxCfg::DpAlg> {
 public:
  static Energy Mfe(const erg::EnergyModelPtr& em, const std::string& s) {
    return Ctx(em, CtxCfg{.dp_alg = GetParam()}).Fold(Primary::FromSeq(s)).mfe.energy;
  }
};

#if ENERGY_PRECISION == 2

TEST_P(T22MfeTest, T22P2) {
  // Fast enough for brute force:
  EXPECT_EQ(E(-0.58), Mfe(t22p2, "CCUCCGGG"));
  EXPECT_EQ(E(-0.53), Mfe(t22p2, "CGGAAACGG"));
  EXPECT_EQ(E(-0.49), Mfe(t22p2, "UGCAAAGCAA"));
  EXPECT_EQ(E(-4.44), Mfe(t22p2, "GGGGAAACCCC"));
  EXPECT_EQ(E(-1.42), Mfe(t22p2, "CUUAUAGUUAAGG"));
  EXPECT_EQ(E(-4.02), Mfe(t22p2, "CCGAAGGGGCUGCGGCG"));
  EXPECT_EQ(E(-2.94), Mfe(t22p2, "GCCAAGGCCCCACCCGGA"));
  EXPECT_EQ(E(-5.00), Mfe(t22p2, "GGCCGAUGGCAGCGAUAGC"));
  EXPECT_EQ(E(-2.08), Mfe(t22p2, "CUGAAACUGGAAACAGAAAUG"));

  // Too slow for brute force:
  if (GetParam() == CtxCfg::DpAlg::BRUTE) return;
  EXPECT_EQ(E(-5.26), Mfe(t22p2, "UUGAAAAGCGGUUCCGUUCAGUCCUACUCACACGUCCGUCACACAUUAUGCCGGUAGAUA"));
  EXPECT_EQ(E(-13.43),
      Mfe(t22p2, "AAAAACUAGCAUCUAGUGGGCUCCCGAUCGCCUCCUUCUCGUAUUACGUUAAUGCAACUCAAGUGAGCCCGU"));
  EXPECT_EQ(E(-5.83), Mfe(t22p2, "AAAUUCCGCUUGACAGCUCGCCACAACGGCAGGAC"));
  EXPECT_EQ(E(-12.39), Mfe(t22p2, "ACCGUCAGCUACCGCCGACUAUACUCUUUAGUCAGACGGGG"));
  EXPECT_EQ(E(-7.54), Mfe(t22p2, "CACACUCCCGCAAAUGCCGAGUAUCAGAUUACUCCCCGGG"));
  EXPECT_EQ(E(-3.24), Mfe(t22p2, "CCCAACGGAGUAACUUAGCGAAUAGCAGGGG"));
  EXPECT_EQ(E(-12.06), Mfe(t22p2, "CCGGGCCAGCCCGCUCCUACGGGGGGUC"));
  EXPECT_EQ(E(-7.57), Mfe(t22p2, "CCGUAAAGUCGAACCAGACGUGCAUGAGCAAGCGG"));
  EXPECT_EQ(E(-3.70), Mfe(t22p2, "CCUGGAUAUUCCGAUGAGCACGUGCGAGGGC"));
  EXPECT_EQ(E(-6.47), Mfe(t22p2, "CGCAGGGUCGGACCCGGGAGAACCGCGA"));
  EXPECT_EQ(E(-6.72), Mfe(t22p2, "CGCUUAAGGCUAUUUGGCCGGAUCUCCAAGGCA"));
  EXPECT_EQ(
      E(-11.68), Mfe(t22p2, "GAUGAGGGGAAACGGUGACUGGGACUCAGACAACGAUAGCAGCCAAAUAGGGAAGCUUCCUUC"));
  EXPECT_EQ(E(-4.57), Mfe(t22p2, "GCCAGACAAACACGAUUCUUUGAUAGUACUGACUAUUCUACAAUUAGGCC"));
  EXPECT_EQ(E(-5.95), Mfe(t22p2, "GCGACCGGGGCUGGCUUGGUAAUGGUACUCCC"));
  EXPECT_EQ(E(-30.18),
      Mfe(t22p2, "GCGACCGGGGCUGGCUUGGUAAUGGUACUCCCCUGUCACGGGAGAGAAUGUGGGUUCAAAUCCCAUCGGUCGCGCCA"));
  EXPECT_EQ(E(-5.33), Mfe(t22p2, "GCGCCCCAGUCGACGCUGAGCUCCUCUGCU"));
  EXPECT_EQ(E(-15.33), Mfe(t22p2, "GGCACAUACUGGGACAACAUUCGUUGGGUUCCCGGGUCGAACGGCAGCCG"));
  EXPECT_EQ(E(-4.24), Mfe(t22p2, "GGCGCACGCGUUAGCCGGGGAUCCACAGUGC"));
  EXPECT_EQ(E(-3.59), Mfe(t22p2, "GUCAUGCACUACUGCGAUUCAUACGGAAACAGACG"));
  EXPECT_EQ(E(-3.00), Mfe(t22p2, "UACCCUGUUCAGCAUUGGAAAUUUCCUGGG"));
  EXPECT_EQ(E(-8.44), Mfe(t22p2, "UCCACGGCUCGACGGCGCACUUAGUGCGUGGG"));
  EXPECT_EQ(E(-19.97), Mfe(t22p2, "UGGGGAAGUGCCGAUGCGGUACUAUUAUCCACUGUCUAUGGAUAAGUCCCCCGACCU"));
}

#else

GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(T22MfeTest);

#endif

INSTANTIATE_TEST_SUITE_P(FoldAlgTest, T22MfeTest, testing::ValuesIn(CtxCfg::DP_ALGS));

}  // namespace mrna::mfe
