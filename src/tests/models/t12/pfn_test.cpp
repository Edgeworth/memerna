// Copyright 2024 Eliot Courtney.
#include "api/pfn.h"

#include <string>
#include <tuple>

#include "api/ctx/ctx_cfg.h"
#include "gtest/gtest.h"
#include "model/primary.h"
#include "tests/init.h"
#include "tests/util.h"
#include "util/float.h"

namespace mrna {

class PfnTestT12 : public testing::TestWithParam<std::tuple<int, CtxCfg::PfnAlg>> {
 public:
  static pfn::PfnResult Pfn(const BackendModelPtr& m, const std::string& s) {
    return GetPfn(m, std::get<1>(GetParam()), s);
  }

  static pfn::PfnResult Pfn(const BackendModelPtr& m, const Primary& r) {
    return GetPfn(m, std::get<1>(GetParam()), r);
  }
};

#if ENERGY_PRECISION == 1

GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(PfnTestT12);

#elif ENERGY_PRECISION == 2

TEST_P(PfnTestT12, T12P2) {
  auto [i, alg] = GetParam();
  const auto& m = t12_ms[i];
  if (!Contains(CtxCfg::PfnAlgsForBackend(m), alg)) return;

  EXPECT_REL_EQ(FLT(4.06569633368939134129842956017929466372263904011), Pfn(m, "CCUCCGGG").pfn.q);
  EXPECT_REL_EQ(FLT(3.99326566300301791033216574191242303938854885947), Pfn(m, "CGGAAACGG").pfn.q);
  EXPECT_REL_EQ(FLT(4.78710233484875966364273595867119395656372672638), Pfn(m, "UGCAAAGCAA").pfn.q);
  EXPECT_REL_EQ(
      FLT(2662.62888037900558704265668051982251217213153673), Pfn(m, "GGGGAAACCCC").pfn.q);
  EXPECT_REL_EQ(
      FLT(9.99563943739342085541269179482384129892368533722), Pfn(m, "CUUAUAGUUAAGG").pfn.q);
  EXPECT_REL_EQ(
      FLT(862.868063685304486819230022354325051191500088491), Pfn(m, "CCGAAGGGGCUGCGGCG").pfn.q);
  EXPECT_REL_EQ(
      FLT(187.240327086207995339175981065221999797886386151), Pfn(m, "GCCAAGGCCCCACCCGGA").pfn.q);
  EXPECT_REL_EQ(
      FLT(3427.25182440763216480351674919522989458198248782), Pfn(m, "GGCCGAUGGCAGCGAUAGC").pfn.q);
  EXPECT_REL_EQ(FLT(95.3203576551913841120607445389624915106981460066),
      Pfn(m, "CUGAAACUGGAAACAGAAAUG").pfn.q);

  // Too slow for brute force:
  if (alg == CtxCfg::PfnAlg::BRUTE) return;
  EXPECT_REL_EQ(FLT(489568270.164770419074506176947118047561497788815),
      Pfn(m, "CCGGGCCAGCCCGCUCCUACGGGGGGUC").pfn.q);
  EXPECT_REL_EQ(FLT(187180.833955420153362511796970009127830070133408),
      Pfn(m, "CGCAGGGUCGGACCCGGGAGAACCGCGA").pfn.q);
  EXPECT_REL_EQ(FLT(814.008918620087370568179693189208017088096864986),
      Pfn(m, "UACCCUGUUCAGCAUUGGAAAUUUCCUGGG").pfn.q);
  EXPECT_REL_EQ(FLT(22741.5868387155689286279036191520339838073439982),
      Pfn(m, "GCGCCCCAGUCGACGCUGAGCUCCUCUGCU").pfn.q);
  EXPECT_REL_EQ(FLT(1553.20048228785844588065846731295769815746227141),
      Pfn(m, "CCCAACGGAGUAACUUAGCGAAUAGCAGGGG").pfn.q);
  EXPECT_REL_EQ(FLT(16506.5628374857920600909881467801681421370345844),
      Pfn(m, "GGCGCACGCGUUAGCCGGGGAUCCACAGUGC").pfn.q);
  EXPECT_REL_EQ(FLT(2766.18219170267040968134969429655986933697602129),
      Pfn(m, "CCUGGAUAUUCCGAUGAGCACGUGCGAGGGC").pfn.q);
  EXPECT_REL_EQ(FLT(16314470.3366908442969861810014982898798240233482),
      Pfn(m, "UCCACGGCUCGACGGCGCACUUAGUGCGUGGG").pfn.q);
  EXPECT_REL_EQ(FLT(174354.136340798747237142734124689962155219671546),
      Pfn(m, "GCGACCGGGGCUGGCUUGGUAAUGGUACUCCC").pfn.q);
  EXPECT_REL_EQ(FLT(306757.35359762952567953542324994395947672765144),
      Pfn(m, "CGCUUAAGGCUAUUUGGCCGGAUCUCCAAGGCA").pfn.q);
  EXPECT_REL_EQ(FLT(124440.050413952833453556719729744722178663147699),
      Pfn(m, "AAAUUCCGCUUGACAGCUCGCCACAACGGCAGGAC").pfn.q);
  EXPECT_REL_EQ(FLT(927455.616926851270597371460103197308424506866451),
      Pfn(m, "CCGUAAAGUCGAACCAGACGUGCAUGAGCAAGCGG").pfn.q);
  EXPECT_REL_EQ(FLT(3587.34358858919765684031015543333796302415958089),
      Pfn(m, "GUCAUGCACUACUGCGAUUCAUACGGAAACAGACG").pfn.q);
  EXPECT_REL_EQ(FLT(600608.359736951624049941754677153894661712659679),
      Pfn(m, "CACACUCCCGCAAAUGCCGAGUAUCAGAUUACUCCCCGGG").pfn.q);
  EXPECT_REL_EQ(FLT(1481658714.9941444315310894152364794441233085645),
      Pfn(m, "ACCGUCAGCUACCGCCGACUAUACUCUUUAGUCAGACGGGG").pfn.q);
  EXPECT_REL_EQ(FLT(15550.8855514817640395248766652356206702651430645),
      Pfn(m, "GCCAGACAAACACGAUUCUUUGAUAGUACUGACUAUUCUACAAUUAGGCC").pfn.q);
  EXPECT_REL_EQ(FLT(176566679168.85927333626088323239116642854614832),
      Pfn(m, "GGCACAUACUGGGACAACAUUCGUUGGGUUCCCGGGUCGAACGGCAGCCG").pfn.q);
  EXPECT_REL_EQ(FLT(4659356908563728.47058108720744252481389275608726),
      Pfn(m, "UGGGGAAGUGCCGAUGCGGUACUAUUAUCCACUGUCUAUGGAUAAGUCCCCCGACCU").pfn.q);
  EXPECT_REL_EQ(FLT(307224.227055583795926137214729598592857602827188),
      Pfn(m, "UUGAAAAGCGGUUCCGUUCAGUCCUACUCACACGUCCGUCACACAUUAUGCCGGUAGAUA").pfn.q);
  EXPECT_REL_EQ(FLT(24442100708.1476972328721860799593888394102495689),
      Pfn(m, "GAUGAGGGGAAACGGUGACUGGGACUCAGACAACGAUAGCAGCCAAAUAGGGAAGCUUCCUUC").pfn.q);
  EXPECT_REL_EQ(FLT(108845941078.995157523709039360707789300153288793),
      Pfn(m, "AAAAACUAGCAUCUAGUGGGCUCCCGAUCGCCUCCUUCUCGUAUUACGUUAAUGCAACUCAAGUGAGCCCGU").pfn.q);
  EXPECT_REL_EQ(FLT(5288640267480376963639.59972345718964029669389315),
      Pfn(m, "GCGACCGGGGCUGGCUUGGUAAUGGUACUCCCCUGUCACGGGAGAGAAUGUGGGUUCAAAUCCCAUCGGUCGCGCCA")
          .pfn.q);
  EXPECT_REL_EQ(FLT(2.2656269188107328870825780514941627464024016996e+68),
      Pfn(m, std::get<Primary>(k16sHSapiens3)).pfn.q);
}

#endif

INSTANTIATE_TEST_SUITE_P(PfnTest, PfnTestT12,
    testing::Combine(
        testing::Range(0, NUM_T12_MODELS), testing::ValuesIn(EnumValues<CtxCfg::PfnAlg>())));

}  // namespace mrna
